"""add_api_keys_tables

Revision ID: 6622dd9aa570
Revises: rename_seller_to_org_id
Create Date: 2025-07-30 15:49:09.384178

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector.sqlalchemy


# revision identifiers, used by Alembic.
revision: str = '6622dd9aa570'
down_revision: Union[str, None] = 'rename_seller_to_org_id'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('organizations', 'subdomain',
               existing_type=sa.VARCHAR(),
               nullable=True,
               existing_comment='Unique subdomain for multi-tenant access')
    op.drop_index(op.f('idx_organizations_subdomain'), table_name='organizations')
    op.create_index(op.f('ix_organizations_subdomain'), 'organizations', ['subdomain'], unique=True)
    op.alter_column('products', 'embedding',
               existing_type=pgvector.sqlalchemy.vector.VECTOR(dim=1536),
               comment='Dense embedding vector for semantic search',
               existing_nullable=True)
    op.drop_index(op.f('idx_products_embedding'), table_name='products', postgresql_using='hnsw')
    
    # Create api_keys table
    op.create_table(
        'api_keys',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('organization_id', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(255), nullable=False),
        sa.Column('key_hash', sa.String(255), nullable=False),
        sa.Column('permissions', sa.JSON(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('is_active', sa.Boolean(), server_default='true', nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    )
    op.create_index(op.f('ix_api_keys_organization_id'), 'api_keys', ['organization_id'], unique=False)
    op.create_index(op.f('ix_api_keys_key_hash'), 'api_keys', ['key_hash'], unique=True)
    
    # Create api_key_audit_log table
    op.create_table(
        'api_key_audit_log',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('api_key_id', sa.UUID(), nullable=False),
        sa.Column('action', sa.String(50), nullable=False),
        sa.Column('ip_address', sa.String(45), nullable=True),
        sa.Column('user_agent', sa.String(500), nullable=True),
        sa.Column('request_path', sa.String(500), nullable=True),
        sa.Column('response_status', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.ForeignKeyConstraint(['api_key_id'], ['api_keys.id'], ondelete='CASCADE'),
    )
    op.create_index(op.f('ix_api_key_audit_log_api_key_id'), 'api_key_audit_log', ['api_key_id'], unique=False)
    op.create_index(op.f('ix_api_key_audit_log_created_at'), 'api_key_audit_log', ['created_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop api_key_audit_log table
    op.drop_index(op.f('ix_api_key_audit_log_created_at'), table_name='api_key_audit_log')
    op.drop_index(op.f('ix_api_key_audit_log_api_key_id'), table_name='api_key_audit_log')
    op.drop_table('api_key_audit_log')
    
    # Drop api_keys table
    op.drop_index(op.f('ix_api_keys_key_hash'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_organization_id'), table_name='api_keys')
    op.drop_table('api_keys')
    
    op.create_index(op.f('idx_products_embedding'), 'products', ['embedding'], unique=False, postgresql_using='hnsw')
    op.alter_column('products', 'embedding',
               existing_type=pgvector.sqlalchemy.vector.VECTOR(dim=1536),
               comment=None,
               existing_comment='Dense embedding vector for semantic search',
               existing_nullable=True)
    op.drop_index(op.f('ix_organizations_subdomain'), table_name='organizations')
    op.create_index(op.f('idx_organizations_subdomain'), 'organizations', ['subdomain'], unique=True)
    op.alter_column('organizations', 'subdomain',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_comment='Unique subdomain for multi-tenant access')
    # ### end Alembic commands ###
